# [doc = "Register `CR1` reader"] pub struct R (crate :: R < CR1_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < CR1_SPEC > ; # [inline (always)] fn deref (& self) -> & Self :: Target { & self . 0 } } impl From < crate :: R < CR1_SPEC > > for R { # [inline (always)] fn from (reader : crate :: R < CR1_SPEC >) -> Self { R (reader) } } # [doc = "Register `CR1` writer"] pub struct W (crate :: W < CR1_SPEC >) ; impl core :: ops :: Deref for W { type Target = crate :: W < CR1_SPEC > ; # [inline (always)] fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: ops :: DerefMut for W { # [inline (always)] fn deref_mut (& mut self) -> & mut Self :: Target { & mut self . 0 } } impl From < crate :: W < CR1_SPEC > > for W { # [inline (always)] fn from (writer : crate :: W < CR1_SPEC >) -> Self { W (writer) } } # [doc = "Field `SBK` reader - SBK"] pub type SBK_R = crate :: BitReader < bool > ; # [doc = "Field `SBK` writer - SBK"] pub type SBK_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , CR1_SPEC , bool , O > ; # [doc = "Field `RWU` reader - RWU"] pub type RWU_R = crate :: BitReader < bool > ; # [doc = "Field `RWU` writer - RWU"] pub type RWU_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , CR1_SPEC , bool , O > ; # [doc = "Field `RE` reader - RE"] pub type RE_R = crate :: BitReader < bool > ; # [doc = "Field `RE` writer - RE"] pub type RE_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , CR1_SPEC , bool , O > ; # [doc = "Field `TE` reader - TE"] pub type TE_R = crate :: BitReader < bool > ; # [doc = "Field `TE` writer - TE"] pub type TE_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , CR1_SPEC , bool , O > ; # [doc = "Field `IDLEIE` reader - IDLEIE"] pub type IDLEIE_R = crate :: BitReader < bool > ; # [doc = "Field `IDLEIE` writer - IDLEIE"] pub type IDLEIE_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , CR1_SPEC , bool , O > ; # [doc = "Field `RXNEIE` reader - RXNEIE"] pub type RXNEIE_R = crate :: BitReader < bool > ; # [doc = "Field `RXNEIE` writer - RXNEIE"] pub type RXNEIE_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , CR1_SPEC , bool , O > ; # [doc = "Field `TCIE` reader - TCIE"] pub type TCIE_R = crate :: BitReader < bool > ; # [doc = "Field `TCIE` writer - TCIE"] pub type TCIE_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , CR1_SPEC , bool , O > ; # [doc = "Field `TXEIE` reader - TXEIE"] pub type TXEIE_R = crate :: BitReader < bool > ; # [doc = "Field `TXEIE` writer - TXEIE"] pub type TXEIE_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , CR1_SPEC , bool , O > ; # [doc = "Field `PEIE` reader - PEIE"] pub type PEIE_R = crate :: BitReader < bool > ; # [doc = "Field `PEIE` writer - PEIE"] pub type PEIE_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , CR1_SPEC , bool , O > ; # [doc = "Field `PS` reader - PS"] pub type PS_R = crate :: BitReader < bool > ; # [doc = "Field `PS` writer - PS"] pub type PS_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , CR1_SPEC , bool , O > ; # [doc = "Field `PCE` reader - PCE"] pub type PCE_R = crate :: BitReader < bool > ; # [doc = "Field `PCE` writer - PCE"] pub type PCE_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , CR1_SPEC , bool , O > ; # [doc = "Field `WAKE` reader - WAKE"] pub type WAKE_R = crate :: BitReader < bool > ; # [doc = "Field `WAKE` writer - WAKE"] pub type WAKE_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , CR1_SPEC , bool , O > ; # [doc = "Field `M` reader - M"] pub type M_R = crate :: BitReader < bool > ; # [doc = "Field `M` writer - M"] pub type M_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , CR1_SPEC , bool , O > ; # [doc = "Field `UE` reader - UE"] pub type UE_R = crate :: BitReader < bool > ; # [doc = "Field `UE` writer - UE"] pub type UE_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , CR1_SPEC , bool , O > ; impl R { # [doc = "Bit 0 - SBK"] # [inline (always)] pub fn sbk (& self) -> SBK_R { SBK_R :: new ((self . bits & 1) != 0) } # [doc = "Bit 1 - RWU"] # [inline (always)] pub fn rwu (& self) -> RWU_R { RWU_R :: new (((self . bits >> 1) & 1) != 0) } # [doc = "Bit 2 - RE"] # [inline (always)] pub fn re (& self) -> RE_R { RE_R :: new (((self . bits >> 2) & 1) != 0) } # [doc = "Bit 3 - TE"] # [inline (always)] pub fn te (& self) -> TE_R { TE_R :: new (((self . bits >> 3) & 1) != 0) } # [doc = "Bit 4 - IDLEIE"] # [inline (always)] pub fn idleie (& self) -> IDLEIE_R { IDLEIE_R :: new (((self . bits >> 4) & 1) != 0) } # [doc = "Bit 5 - RXNEIE"] # [inline (always)] pub fn rxneie (& self) -> RXNEIE_R { RXNEIE_R :: new (((self . bits >> 5) & 1) != 0) } # [doc = "Bit 6 - TCIE"] # [inline (always)] pub fn tcie (& self) -> TCIE_R { TCIE_R :: new (((self . bits >> 6) & 1) != 0) } # [doc = "Bit 7 - TXEIE"] # [inline (always)] pub fn txeie (& self) -> TXEIE_R { TXEIE_R :: new (((self . bits >> 7) & 1) != 0) } # [doc = "Bit 8 - PEIE"] # [inline (always)] pub fn peie (& self) -> PEIE_R { PEIE_R :: new (((self . bits >> 8) & 1) != 0) } # [doc = "Bit 9 - PS"] # [inline (always)] pub fn ps (& self) -> PS_R { PS_R :: new (((self . bits >> 9) & 1) != 0) } # [doc = "Bit 10 - PCE"] # [inline (always)] pub fn pce (& self) -> PCE_R { PCE_R :: new (((self . bits >> 10) & 1) != 0) } # [doc = "Bit 11 - WAKE"] # [inline (always)] pub fn wake (& self) -> WAKE_R { WAKE_R :: new (((self . bits >> 11) & 1) != 0) } # [doc = "Bit 12 - M"] # [inline (always)] pub fn m (& self) -> M_R { M_R :: new (((self . bits >> 12) & 1) != 0) } # [doc = "Bit 13 - UE"] # [inline (always)] pub fn ue (& self) -> UE_R { UE_R :: new (((self . bits >> 13) & 1) != 0) } } impl W { # [doc = "Bit 0 - SBK"] # [inline (always)] # [must_use] pub fn sbk (& mut self) -> SBK_W < 0 > { SBK_W :: new (self) } # [doc = "Bit 1 - RWU"] # [inline (always)] # [must_use] pub fn rwu (& mut self) -> RWU_W < 1 > { RWU_W :: new (self) } # [doc = "Bit 2 - RE"] # [inline (always)] # [must_use] pub fn re (& mut self) -> RE_W < 2 > { RE_W :: new (self) } # [doc = "Bit 3 - TE"] # [inline (always)] # [must_use] pub fn te (& mut self) -> TE_W < 3 > { TE_W :: new (self) } # [doc = "Bit 4 - IDLEIE"] # [inline (always)] # [must_use] pub fn idleie (& mut self) -> IDLEIE_W < 4 > { IDLEIE_W :: new (self) } # [doc = "Bit 5 - RXNEIE"] # [inline (always)] # [must_use] pub fn rxneie (& mut self) -> RXNEIE_W < 5 > { RXNEIE_W :: new (self) } # [doc = "Bit 6 - TCIE"] # [inline (always)] # [must_use] pub fn tcie (& mut self) -> TCIE_W < 6 > { TCIE_W :: new (self) } # [doc = "Bit 7 - TXEIE"] # [inline (always)] # [must_use] pub fn txeie (& mut self) -> TXEIE_W < 7 > { TXEIE_W :: new (self) } # [doc = "Bit 8 - PEIE"] # [inline (always)] # [must_use] pub fn peie (& mut self) -> PEIE_W < 8 > { PEIE_W :: new (self) } # [doc = "Bit 9 - PS"] # [inline (always)] # [must_use] pub fn ps (& mut self) -> PS_W < 9 > { PS_W :: new (self) } # [doc = "Bit 10 - PCE"] # [inline (always)] # [must_use] pub fn pce (& mut self) -> PCE_W < 10 > { PCE_W :: new (self) } # [doc = "Bit 11 - WAKE"] # [inline (always)] # [must_use] pub fn wake (& mut self) -> WAKE_W < 11 > { WAKE_W :: new (self) } # [doc = "Bit 12 - M"] # [inline (always)] # [must_use] pub fn m (& mut self) -> M_W < 12 > { M_W :: new (self) } # [doc = "Bit 13 - UE"] # [inline (always)] # [must_use] pub fn ue (& mut self) -> UE_W < 13 > { UE_W :: new (self) } # [doc = "Writes raw bits to the register."] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . 0 . bits (bits) ; self } } # [doc = "UART4_CR1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr1](index.html) module"] pub struct CR1_SPEC ; impl crate :: RegisterSpec for CR1_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [cr1::R](R) reader structure"] impl crate :: Readable for CR1_SPEC { type Reader = R ; } # [doc = "`write(|w| ..)` method takes [cr1::W](W) writer structure"] impl crate :: Writable for CR1_SPEC { type Writer = W ; const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets CR1 to value 0"] impl crate :: Resettable for CR1_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }