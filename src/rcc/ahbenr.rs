# [doc = "Register `AHBENR` reader"] pub struct R (crate :: R < AHBENR_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < AHBENR_SPEC > ; # [inline (always)] fn deref (& self) -> & Self :: Target { & self . 0 } } impl From < crate :: R < AHBENR_SPEC > > for R { # [inline (always)] fn from (reader : crate :: R < AHBENR_SPEC >) -> Self { R (reader) } } # [doc = "Register `AHBENR` writer"] pub struct W (crate :: W < AHBENR_SPEC >) ; impl core :: ops :: Deref for W { type Target = crate :: W < AHBENR_SPEC > ; # [inline (always)] fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: ops :: DerefMut for W { # [inline (always)] fn deref_mut (& mut self) -> & mut Self :: Target { & mut self . 0 } } impl From < crate :: W < AHBENR_SPEC > > for W { # [inline (always)] fn from (writer : crate :: W < AHBENR_SPEC >) -> Self { W (writer) } } # [doc = "Field `DMA1EN` reader - DMA1 clock enable"] pub type DMA1EN_R = crate :: BitReader < bool > ; # [doc = "Field `DMA1EN` writer - DMA1 clock enable"] pub type DMA1EN_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , AHBENR_SPEC , bool , O > ; # [doc = "Field `DMA2EN` reader - DMA2 clock enable"] pub type DMA2EN_R = crate :: BitReader < bool > ; # [doc = "Field `DMA2EN` writer - DMA2 clock enable"] pub type DMA2EN_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , AHBENR_SPEC , bool , O > ; # [doc = "Field `SRAMEN` reader - SRAM interface clock enable"] pub type SRAMEN_R = crate :: BitReader < bool > ; # [doc = "Field `SRAMEN` writer - SRAM interface clock enable"] pub type SRAMEN_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , AHBENR_SPEC , bool , O > ; # [doc = "Field `FLITFEN` reader - FLITF clock enable"] pub type FLITFEN_R = crate :: BitReader < bool > ; # [doc = "Field `FLITFEN` writer - FLITF clock enable"] pub type FLITFEN_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , AHBENR_SPEC , bool , O > ; # [doc = "Field `CRCEN` reader - CRC clock enable"] pub type CRCEN_R = crate :: BitReader < bool > ; # [doc = "Field `CRCEN` writer - CRC clock enable"] pub type CRCEN_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , AHBENR_SPEC , bool , O > ; # [doc = "Field `FSMCEN` reader - FSMC clock enable"] pub type FSMCEN_R = crate :: BitReader < bool > ; # [doc = "Field `FSMCEN` writer - FSMC clock enable"] pub type FSMCEN_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , AHBENR_SPEC , bool , O > ; # [doc = "Field `SDIOEN` reader - SDIO clock enable"] pub type SDIOEN_R = crate :: BitReader < bool > ; # [doc = "Field `SDIOEN` writer - SDIO clock enable"] pub type SDIOEN_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , AHBENR_SPEC , bool , O > ; impl R { # [doc = "Bit 0 - DMA1 clock enable"] # [inline (always)] pub fn dma1en (& self) -> DMA1EN_R { DMA1EN_R :: new ((self . bits & 1) != 0) } # [doc = "Bit 1 - DMA2 clock enable"] # [inline (always)] pub fn dma2en (& self) -> DMA2EN_R { DMA2EN_R :: new (((self . bits >> 1) & 1) != 0) } # [doc = "Bit 2 - SRAM interface clock enable"] # [inline (always)] pub fn sramen (& self) -> SRAMEN_R { SRAMEN_R :: new (((self . bits >> 2) & 1) != 0) } # [doc = "Bit 4 - FLITF clock enable"] # [inline (always)] pub fn flitfen (& self) -> FLITFEN_R { FLITFEN_R :: new (((self . bits >> 4) & 1) != 0) } # [doc = "Bit 6 - CRC clock enable"] # [inline (always)] pub fn crcen (& self) -> CRCEN_R { CRCEN_R :: new (((self . bits >> 6) & 1) != 0) } # [doc = "Bit 8 - FSMC clock enable"] # [inline (always)] pub fn fsmcen (& self) -> FSMCEN_R { FSMCEN_R :: new (((self . bits >> 8) & 1) != 0) } # [doc = "Bit 10 - SDIO clock enable"] # [inline (always)] pub fn sdioen (& self) -> SDIOEN_R { SDIOEN_R :: new (((self . bits >> 10) & 1) != 0) } } impl W { # [doc = "Bit 0 - DMA1 clock enable"] # [inline (always)] # [must_use] pub fn dma1en (& mut self) -> DMA1EN_W < 0 > { DMA1EN_W :: new (self) } # [doc = "Bit 1 - DMA2 clock enable"] # [inline (always)] # [must_use] pub fn dma2en (& mut self) -> DMA2EN_W < 1 > { DMA2EN_W :: new (self) } # [doc = "Bit 2 - SRAM interface clock enable"] # [inline (always)] # [must_use] pub fn sramen (& mut self) -> SRAMEN_W < 2 > { SRAMEN_W :: new (self) } # [doc = "Bit 4 - FLITF clock enable"] # [inline (always)] # [must_use] pub fn flitfen (& mut self) -> FLITFEN_W < 4 > { FLITFEN_W :: new (self) } # [doc = "Bit 6 - CRC clock enable"] # [inline (always)] # [must_use] pub fn crcen (& mut self) -> CRCEN_W < 6 > { CRCEN_W :: new (self) } # [doc = "Bit 8 - FSMC clock enable"] # [inline (always)] # [must_use] pub fn fsmcen (& mut self) -> FSMCEN_W < 8 > { FSMCEN_W :: new (self) } # [doc = "Bit 10 - SDIO clock enable"] # [inline (always)] # [must_use] pub fn sdioen (& mut self) -> SDIOEN_W < 10 > { SDIOEN_W :: new (self) } # [doc = "Writes raw bits to the register."] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . 0 . bits (bits) ; self } } # [doc = "AHB Peripheral Clock enable register (RCC_AHBENR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ahbenr](index.html) module"] pub struct AHBENR_SPEC ; impl crate :: RegisterSpec for AHBENR_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [ahbenr::R](R) reader structure"] impl crate :: Readable for AHBENR_SPEC { type Reader = R ; } # [doc = "`write(|w| ..)` method takes [ahbenr::W](W) writer structure"] impl crate :: Writable for AHBENR_SPEC { type Writer = W ; const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets AHBENR to value 0x14"] impl crate :: Resettable for AHBENR_SPEC { const RESET_VALUE : Self :: Ux = 0x14 ; }