# [doc = "Register `CFGR` reader"] pub struct R (crate :: R < CFGR_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < CFGR_SPEC > ; # [inline (always)] fn deref (& self) -> & Self :: Target { & self . 0 } } impl From < crate :: R < CFGR_SPEC > > for R { # [inline (always)] fn from (reader : crate :: R < CFGR_SPEC >) -> Self { R (reader) } } # [doc = "Register `CFGR` writer"] pub struct W (crate :: W < CFGR_SPEC >) ; impl core :: ops :: Deref for W { type Target = crate :: W < CFGR_SPEC > ; # [inline (always)] fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: ops :: DerefMut for W { # [inline (always)] fn deref_mut (& mut self) -> & mut Self :: Target { & mut self . 0 } } impl From < crate :: W < CFGR_SPEC > > for W { # [inline (always)] fn from (writer : crate :: W < CFGR_SPEC >) -> Self { W (writer) } } # [doc = "Field `SW` reader - System clock Switch"] pub type SW_R = crate :: FieldReader < u8 , u8 > ; # [doc = "Field `SW` writer - System clock Switch"] pub type SW_W < 'a , const O : u8 > = crate :: FieldWriter < 'a , u32 , CFGR_SPEC , u8 , u8 , 2 , O > ; # [doc = "Field `SWS` reader - System Clock Switch Status"] pub type SWS_R = crate :: FieldReader < u8 , u8 > ; # [doc = "Field `HPRE` reader - AHB prescaler"] pub type HPRE_R = crate :: FieldReader < u8 , u8 > ; # [doc = "Field `HPRE` writer - AHB prescaler"] pub type HPRE_W < 'a , const O : u8 > = crate :: FieldWriter < 'a , u32 , CFGR_SPEC , u8 , u8 , 4 , O > ; # [doc = "Field `PPRE1` reader - APB Low speed prescaler (APB1)"] pub type PPRE1_R = crate :: FieldReader < u8 , u8 > ; # [doc = "Field `PPRE1` writer - APB Low speed prescaler (APB1)"] pub type PPRE1_W < 'a , const O : u8 > = crate :: FieldWriter < 'a , u32 , CFGR_SPEC , u8 , u8 , 3 , O > ; # [doc = "Field `PPRE2` reader - APB High speed prescaler (APB2)"] pub type PPRE2_R = crate :: FieldReader < u8 , u8 > ; # [doc = "Field `PPRE2` writer - APB High speed prescaler (APB2)"] pub type PPRE2_W < 'a , const O : u8 > = crate :: FieldWriter < 'a , u32 , CFGR_SPEC , u8 , u8 , 3 , O > ; # [doc = "Field `ADCPRE` reader - ADC prescaler"] pub type ADCPRE_R = crate :: FieldReader < u8 , u8 > ; # [doc = "Field `ADCPRE` writer - ADC prescaler"] pub type ADCPRE_W < 'a , const O : u8 > = crate :: FieldWriter < 'a , u32 , CFGR_SPEC , u8 , u8 , 2 , O > ; # [doc = "Field `PLLSRC` reader - PLL entry clock source"] pub type PLLSRC_R = crate :: BitReader < bool > ; # [doc = "Field `PLLSRC` writer - PLL entry clock source"] pub type PLLSRC_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , CFGR_SPEC , bool , O > ; # [doc = "Field `PLLXTPRE` reader - HSE divider for PLL entry"] pub type PLLXTPRE_R = crate :: BitReader < bool > ; # [doc = "Field `PLLXTPRE` writer - HSE divider for PLL entry"] pub type PLLXTPRE_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , CFGR_SPEC , bool , O > ; # [doc = "Field `PLLMUL` reader - PLL Multiplication Factor"] pub type PLLMUL_R = crate :: FieldReader < u8 , u8 > ; # [doc = "Field `PLLMUL` writer - PLL Multiplication Factor"] pub type PLLMUL_W < 'a , const O : u8 > = crate :: FieldWriter < 'a , u32 , CFGR_SPEC , u8 , u8 , 4 , O > ; # [doc = "Field `OTGFSPRE` reader - USB OTG FS prescaler"] pub type OTGFSPRE_R = crate :: BitReader < bool > ; # [doc = "Field `OTGFSPRE` writer - USB OTG FS prescaler"] pub type OTGFSPRE_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , CFGR_SPEC , bool , O > ; # [doc = "Field `MCO` reader - Microcontroller clock output"] pub type MCO_R = crate :: FieldReader < u8 , u8 > ; # [doc = "Field `MCO` writer - Microcontroller clock output"] pub type MCO_W < 'a , const O : u8 > = crate :: FieldWriter < 'a , u32 , CFGR_SPEC , u8 , u8 , 3 , O > ; impl R { # [doc = "Bits 0:1 - System clock Switch"] # [inline (always)] pub fn sw (& self) -> SW_R { SW_R :: new ((self . bits & 3) as u8) } # [doc = "Bits 2:3 - System Clock Switch Status"] # [inline (always)] pub fn sws (& self) -> SWS_R { SWS_R :: new (((self . bits >> 2) & 3) as u8) } # [doc = "Bits 4:7 - AHB prescaler"] # [inline (always)] pub fn hpre (& self) -> HPRE_R { HPRE_R :: new (((self . bits >> 4) & 0x0f) as u8) } # [doc = "Bits 8:10 - APB Low speed prescaler (APB1)"] # [inline (always)] pub fn ppre1 (& self) -> PPRE1_R { PPRE1_R :: new (((self . bits >> 8) & 7) as u8) } # [doc = "Bits 11:13 - APB High speed prescaler (APB2)"] # [inline (always)] pub fn ppre2 (& self) -> PPRE2_R { PPRE2_R :: new (((self . bits >> 11) & 7) as u8) } # [doc = "Bits 14:15 - ADC prescaler"] # [inline (always)] pub fn adcpre (& self) -> ADCPRE_R { ADCPRE_R :: new (((self . bits >> 14) & 3) as u8) } # [doc = "Bit 16 - PLL entry clock source"] # [inline (always)] pub fn pllsrc (& self) -> PLLSRC_R { PLLSRC_R :: new (((self . bits >> 16) & 1) != 0) } # [doc = "Bit 17 - HSE divider for PLL entry"] # [inline (always)] pub fn pllxtpre (& self) -> PLLXTPRE_R { PLLXTPRE_R :: new (((self . bits >> 17) & 1) != 0) } # [doc = "Bits 18:21 - PLL Multiplication Factor"] # [inline (always)] pub fn pllmul (& self) -> PLLMUL_R { PLLMUL_R :: new (((self . bits >> 18) & 0x0f) as u8) } # [doc = "Bit 22 - USB OTG FS prescaler"] # [inline (always)] pub fn otgfspre (& self) -> OTGFSPRE_R { OTGFSPRE_R :: new (((self . bits >> 22) & 1) != 0) } # [doc = "Bits 24:26 - Microcontroller clock output"] # [inline (always)] pub fn mco (& self) -> MCO_R { MCO_R :: new (((self . bits >> 24) & 7) as u8) } } impl W { # [doc = "Bits 0:1 - System clock Switch"] # [inline (always)] # [must_use] pub fn sw (& mut self) -> SW_W < 0 > { SW_W :: new (self) } # [doc = "Bits 4:7 - AHB prescaler"] # [inline (always)] # [must_use] pub fn hpre (& mut self) -> HPRE_W < 4 > { HPRE_W :: new (self) } # [doc = "Bits 8:10 - APB Low speed prescaler (APB1)"] # [inline (always)] # [must_use] pub fn ppre1 (& mut self) -> PPRE1_W < 8 > { PPRE1_W :: new (self) } # [doc = "Bits 11:13 - APB High speed prescaler (APB2)"] # [inline (always)] # [must_use] pub fn ppre2 (& mut self) -> PPRE2_W < 11 > { PPRE2_W :: new (self) } # [doc = "Bits 14:15 - ADC prescaler"] # [inline (always)] # [must_use] pub fn adcpre (& mut self) -> ADCPRE_W < 14 > { ADCPRE_W :: new (self) } # [doc = "Bit 16 - PLL entry clock source"] # [inline (always)] # [must_use] pub fn pllsrc (& mut self) -> PLLSRC_W < 16 > { PLLSRC_W :: new (self) } # [doc = "Bit 17 - HSE divider for PLL entry"] # [inline (always)] # [must_use] pub fn pllxtpre (& mut self) -> PLLXTPRE_W < 17 > { PLLXTPRE_W :: new (self) } # [doc = "Bits 18:21 - PLL Multiplication Factor"] # [inline (always)] # [must_use] pub fn pllmul (& mut self) -> PLLMUL_W < 18 > { PLLMUL_W :: new (self) } # [doc = "Bit 22 - USB OTG FS prescaler"] # [inline (always)] # [must_use] pub fn otgfspre (& mut self) -> OTGFSPRE_W < 22 > { OTGFSPRE_W :: new (self) } # [doc = "Bits 24:26 - Microcontroller clock output"] # [inline (always)] # [must_use] pub fn mco (& mut self) -> MCO_W < 24 > { MCO_W :: new (self) } # [doc = "Writes raw bits to the register."] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . 0 . bits (bits) ; self } } # [doc = "Clock configuration register (RCC_CFGR)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cfgr](index.html) module"] pub struct CFGR_SPEC ; impl crate :: RegisterSpec for CFGR_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [cfgr::R](R) reader structure"] impl crate :: Readable for CFGR_SPEC { type Reader = R ; } # [doc = "`write(|w| ..)` method takes [cfgr::W](W) writer structure"] impl crate :: Writable for CFGR_SPEC { type Writer = W ; const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets CFGR to value 0"] impl crate :: Resettable for CFGR_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }